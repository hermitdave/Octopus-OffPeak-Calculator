@page "/"
<h1>Hello, welcome to Octopus Energy Off Peak calculator. You will need API key and consumption url from Octopus account</h1>

@using Octopus_SmartData
@using Radzen
@using System.Text
@inject DataManager DataManager
@inject IJSRuntime JSRuntime


<table width="80%">
    <tr>
        <td><label>API Key</label></td>
        <td width="80%"><input @bind-value="@apiKey" style="width: 100%;" /></td>
    </tr>
    <tr>
        <td><label>Consumption Url</label></td>
        <td width="80%"><input @bind-value="@consumptionUrl" style="width: 100%;" /></td>
    </tr>
    <tr>
        <td>Off Peak hours</td>
        <td>
            <select @bind="@offPeakStartHour">
                <option value=0>00</option>
                <option value=1>01</option>
                <option value=2>02</option>
                <option value=3>03</option>
                <option value=4>04</option>
                <option value=5>05</option>
                <option value=6>06</option>
                <option value=7>07</option>
                <option value=8>08</option>
                <option value=9>09</option>
                <option value=10>10</option>
                <option value=11>11</option>
                <option value=12>12</option>
                <option value=13>13</option>
                <option value=14>14</option>
                <option value=15>15</option>
                <option value=16>16</option>
                <option value=17>17</option>
                <option value=18>18</option>
                <option value=19>19</option>
                <option value=20>20</option>
                <option value=21>21</option>
                <option value=22>22</option>
                <option value=23>23</option>
            </select>
            <select @bind="@offPeakStartMinute">
                <option value=0>00</option>
                <option value=30>30</option>
            </select>
            to
            <select @bind="@offPeakEndHour">
                <option value=0>00</option>
                <option value=1>01</option>
                <option value=2>02</option>
                <option value=3>03</option>
                <option value=4>04</option>
                <option value=5>05</option>
                <option value=6>06</option>
                <option value=7>07</option>
                <option value=8>08</option>
                <option value=9>09</option>
                <option value=10>10</option>
                <option value=11>11</option>
                <option value=12>12</option>
                <option value=13>13</option>
                <option value=14>14</option>
                <option value=15>15</option>
                <option value=16>16</option>
                <option value=17>17</option>
                <option value=18>18</option>
                <option value=19>19</option>
                <option value=20>20</option>
                <option value=21>21</option>
                <option value=22>22</option>
                <option value=23>23</option>
            </select>
            <select @bind="@offPeakEndMinute">
                <option value=0>00</option>
                <option value=30>30</option>
            </select>
        </td>
    </tr>
    <tr>
        <td><label>Report duration</label></td>
        <td width="80%">
            <select @bind="@duration">
                <option value=30>30</option>
                <option value=60>60</option>
                <option value=90>90</option>
                <option value=120>120</option>
            </select>
        </td>
    </tr>
    <tr>
        <td colspan="2">
            <button type="submit" @onclick="@GetConsumptionData">Process usage data</button>
        </td>
    </tr>
</table>

<hr />

@if (dailyConsumptions.Count == 0)
{
    @if (fetching)
    {
        <RadzenProgressBar Value="100" ShowValue="false" Mode="ProgressBarMode.Indeterminate" />
    }
}
else
{
    <button @onclick="DownloadBinaryOptim">
        Download processed data as CSV
    </button>

    <RadzenChart>
        <RadzenAreaSeries Smooth="true" Data="@dailyConsumptions" CategoryProperty="Date" Title="Total" ValueProperty="Total">
        </RadzenAreaSeries>
        <RadzenAreaSeries Smooth="true" Data="@offPeakConsumptions" CategoryProperty="Date" Title="Off Peak" ValueProperty="Consumption">
        </RadzenAreaSeries>
        <RadzenCategoryAxis Padding="20" FormatString="{0:dd MMM}" />
        <RadzenValueAxis Formatter="@FormatConsumption">
            <RadzenGridLines Visible="true" />
            <RadzenAxisTitle Text="Usage in kWh" />
        </RadzenValueAxis>
    </RadzenChart>

    <table class="table">
        <thead>
            <tr>
                <th>Date</th>
                <th>Peak. (kWh)</th>
                <th>Off Peak. (kWh)</th>
                <th>Total (kWh)</th>
                <th>Off Peak %</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var consumption in dailyConsumptions)
            {
                <tr>
                    <td>@consumption.Date.ToString("dd MMM")</td>
                    <td>@consumption.PeakDisplay</td>
                    <td>@consumption.OffPeakDisplay</td>
                    <td>@consumption.TotalDisplay</td>
                    <td>@consumption.OffPeakPercentDisplay</td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private bool fetching = false;

    private string apiKey = "";
    private string consumptionUrl = "";
    private int duration = 30;
    private int offPeakStartHour { get; set; }
    private int offPeakStartMinute { get; set; }
    private int offPeakEndHour { get; set; }
    private int offPeakEndMinute { get; set; }

    private TimeSpan offPeakStart = new TimeSpan();
    private TimeSpan offPeakEnd = new TimeSpan();

    private List<DailyConsumption> dailyConsumptions = new List<DailyConsumption>();

    private List<PartConsumption> peakConsumptions = new List<PartConsumption>();
    private List<PartConsumption> offPeakConsumptions = new List<PartConsumption>();

    string FormatConsumption(object value)
    {
        return ((double)value).ToString("N0");
    }

    private async void GetConsumptionData(MouseEventArgs mouseEventArgs)
    {
        if (String.IsNullOrWhiteSpace(apiKey))
        {
            return;
        }

        if (String.IsNullOrWhiteSpace(consumptionUrl))
        {
            return;
        }

        fetching = true;

        dailyConsumptions.Clear();
        peakConsumptions.Clear();
        offPeakConsumptions.Clear();

        // do something
        await InvokeAsync(() =>
        {
            StateHasChanged();
        });

        offPeakStart = new TimeSpan(offPeakStartHour, offPeakStartMinute, 0);
        offPeakEnd = new TimeSpan(offPeakEndHour, offPeakEndMinute, 0);

        var dataManager = new DataManager();
        var data = await dataManager.FetchDailyUsageData(consumptionUrl, apiKey, duration, offPeakStart, offPeakEnd);

        fetching = false;

        dailyConsumptions.AddRange(data);

        dailyConsumptions.ForEach(consumption =>
        {
            //dailyOffPeakValues.Add(consumption.OffPeakPercentage)
            peakConsumptions.Add(consumption.PeakConsumption);
            offPeakConsumptions.Add(consumption.OffPeakConsumption);
        });

        // do something
        await InvokeAsync(() =>
        {
            StateHasChanged();
        });
    }

    async void DownloadBinaryOptim()
    {
        StringBuilder sb = new StringBuilder();

        sb.AppendLine("Date, Peak, OffPeak");
        foreach(var consumption in dailyConsumptions)
        {
            sb.AppendLine($"{consumption.Date.ToString("dd MMM yyyy")}, {consumption.PeakDisplay}, {consumption.OffPeakDisplay}");
        }

        var file = Encoding.ASCII.GetBytes(sb.ToString());

        string fileName = $"ElectricityConsumption-{duration}-days.csv";
        string contentType = "application/octet-stream";

        // Check if the IJSRuntime is the WebAssembly implementation of the JSRuntime
        if (JSRuntime is IJSUnmarshalledRuntime webAssemblyJSRuntime)
        {
            webAssemblyJSRuntime.InvokeUnmarshalled<string, string, byte[], bool>("BlazorDownloadFileFast", fileName, contentType, file);
        }
        else
        {
            // Fall back to the slow method if not in WebAssembly
            await JSRuntime.InvokeVoidAsync("BlazorDownloadFile", fileName, contentType, file);
        }
    }
}
